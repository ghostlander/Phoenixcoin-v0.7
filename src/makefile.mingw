# Copyright (c) 2009-2010 Satoshi Nakamoto
# Distributed under the MIT/X11 software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

USE_UPNP:=0
USE_IPV6:=1

CC = gcc
CFLAGS = -O2 -fomit-frame-pointer

INCLUDEPATHS= \
 -I"/home/Administrator/boost-1.70" \
 -I"/home/Administrator/db-5.3.28/build_unix" \
 -I"/home/Administrator/openssl-1.0.2u/include"

LIBPATHS= \
 -L"/home/Administrator/boost-1.70/stage/lib" \
 -L"/home/Administrator/db-5.3.28/build_unix" \
 -L"/home/Administrator/openssl-1.0.2u"

LIBS= \
 -l boost_system-mgw49-mt-x64-1_70 \
 -l boost_filesystem-mgw49-mt-x64-1_70 \
 -l boost_program_options-mgw49-mt-x64-1_70 \
 -l boost_thread-mgw49-mt-x64-1_70 \
 -l boost_chrono-mgw49-mt-x64-1_70 \
 -l db_cxx \
 -l ssl \
 -l crypto

OSDEFS = -DWINDOWS
DEFS = -DBOOST_THREAD_USE_LIB -DBOOST_SPIRIT_THREADSAFE

CFLAGS += -mthreads -w -Wall -Wextra -Wno-ignored-qualifiers -Wformat -Wformat-security \
-Wno-unused-parameter $(OSDEFS) $(DEFS) $(INCLUDEPATHS)

ifndef USE_UPNP
 override USE_UPNP = -
endif

ifneq (${USE_UPNP}, -)
 INCLUDEPATHS += -I"/home/Administrator"
 LIBPATHS += -L"/home/Administrator/miniupnpc"
 LIBS += -l miniupnpc -l iphlpapi
 DEFS += -DSTATICLIB -DUSE_UPNP=$(USE_UPNP)
endif

ifneq (${USE_IPV6}, -)
 DEFS += -DUSE_IPV6=$(USE_IPV6)
endif

# May break MinGW64
#LDFLAGS += -Wl,--large-address-aware

LDFLAGS += -Wl,-s -Wl,--dynamicbase -Wl,--nxcompat -static -static-libgcc -static-libstdc++ -pthread

LIBS += -lkernel32 -luser32 -lgdi32 -lcomdlg32 -lwinspool -lwinmm -lshell32 -lcomctl32 -lole32 -loleaut32 -luuid -lrpcrt4 -ladvapi32 -lws2_32 -lmswsock -lshlwapi

TESTDEFS = -DTEST_DATA_DIR=$(abspath test/data)

# TODO: make the mingw builds smarter about dependencies, like the linux/osx builds are
HEADERS = $(wildcard *.h)

OBJS= \
    obj/alert.o \
    obj/version.o \
    obj/checkpoints.o \
    obj/netbase.o \
    obj/addrman.o \
    obj/crypter.o \
    obj/key.o \
    obj/db.o \
    obj/init.o \
    obj/irc.o \
    obj/keystore.o \
    obj/main.o \
    obj/net.o \
    obj/protocol.o \
    obj/rpcmain.o \
    obj/rpcdump.o \
    obj/rpcnet.o \
    obj/rpcmining.o \
    obj/rpcwallet.o \
    obj/rpcblockchain.o \
    obj/rpcrawtransaction.o \
    obj/script.o \
    obj/sync.o \
    obj/util.o \
    obj/wallet.o \
    obj/walletdb.o \
    obj/noui.o \
    obj/neoscrypt.o \
    obj/neoscrypt_asm.o \
    obj/ntp.o

all: phoenixcoind.exe

test check: test_phoenixcoin.exe FORCE
	test_phoenixcoin.exe

obj/%.o: %.cpp $(HEADERS)
	g++ -c $(CFLAGS) -o $@ $<

obj/neoscrypt.o: neoscrypt.c
	$(CC) $(CFLAGS) -DNEOSCRYPT_SHA256 -DNEOSCRYPT_ASM -DNEOSCRYPT_OPT -c -o $@ $^

obj/neoscrypt_asm.o: neoscrypt_asm.S
	$(CC) -c $(OSDEFS) -DNEOSCRYPT_SHA256 -DNEOSCRYPT_ASM -DNEOSCRYPT_OPT -o $@ $^

phoenixcoind.exe: $(OBJS:obj/%=obj/%)
	g++ $(CFLAGS) $(LDFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS)

TESTOBJS := $(patsubst test/%.cpp,obj-test/%.o,$(wildcard test/*.cpp))

obj-test/%.o: test/%.cpp $(HEADERS)
	g++ -c $(TESTDEFS) $(CFLAGS) -o $@ $<

test_phoenixcoin.exe: $(TESTOBJS) $(filter-out obj/init.o,$(OBJS:obj/%=obj/%))
	g++ $(CFLAGS) $(LDFLAGS) -o $@ $(LIBPATHS) $^ -lboost_unit_test_framework $(LIBS)

clean:
# Windows native shell
	-del /q phoenixcoind test_phoenixcoin
	-del /q obj\*.o
	-del /q obj-test\*.o
	-del /q obj/*.P
	-del /q obj-test/*.P
	-del /q obj/build.h
# MSYS shell
	-rm -f phoenixcoind test_phoenixcoin
	-rm -f obj/*.o
	-rm -f obj-test/*.o
	-rm -f obj/*.P
	-rm -f obj-test/*.P
	-rm -f obj/build.h

FORCE:
